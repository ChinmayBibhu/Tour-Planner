"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = codeItemToDomElement;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function addAttr(el, name, type, value) {
  if (type === 'string' && typeof value === 'string' && value.trim().length > 0) {
    el.setAttribute(name, value);
    return;
  }

  if (type === 'boolean' && typeof value === 'boolean' && value) {
    el.setAttribute(name, '');
    return;
  }

  if (type === 'content' && typeof value === 'string' && value.trim().length > 0) {
    el.appendChild(document.createTextNode(value));
    return;
  }

  console.warn("RawHtml: unknown type ".concat(type, " or unsupported value ").concat(value));
}

function createElementFromCodeItem(rawKey, codeItem, tag, attrs) {
  var el = document.createElement(tag);
  el.setAttribute('data-rawkey', rawKey);

  var _iterator = _createForOfIteratorHelper(attrs),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = (0, _slicedToArray2["default"])(_step.value, 2),
          name = _step$value[0],
          type = _step$value[1];

      addAttr(el, name, type, codeItem.data[name]);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return el;
}

var allowedTags = {
  script: [['src', 'string'], ['content', 'content'], ['async', 'boolean'], ['defer', 'boolean'], ['type', 'string'], ['crossorigin', 'string'], ['integrity', 'string'], ['nomodule', 'boolean'], ['referrerpolicy', 'string']],
  style: [['content', 'content']],
  link: [['href', 'string'], ['rel', 'string'], ['sizes', 'string'], ['type', 'string'], ['media', 'string'], ['as', 'string'], ['crossorigin', 'string']],
  meta: [['charset', 'string'], ['name', 'string'], ['content', 'string'], ['http-equiv', 'string'], ['itemprop', 'string']]
};

function codeItemToDomElement(rawKey, codeItem) {
  if (allowedTags[codeItem.tag]) {
    return createElementFromCodeItem(rawKey, codeItem, codeItem.tag, allowedTags[codeItem.tag]);
  }

  console.warn("RawHtml: unknown tag ".concat(codeItem.tag));
}