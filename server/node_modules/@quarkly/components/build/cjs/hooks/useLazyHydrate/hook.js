"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLazyHydrate = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var _constants = require("./constants");

var _StrategyTypeError = _interopRequireDefault(require("./errors/StrategyTypeError"));

var _StategyOptionsError = _interopRequireDefault(require("./errors/StategyOptionsError"));

var _getQAPI = _interopRequireDefault(require("../../utils/getQAPI"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * @typedef ON
 * @type { Array<string> | string } events событие или события необходимые для запуска
 * */

/**
 * @typedef WHEN_VISIBLE
 * @type { String } rootMargin
 * @type { Element | Document } root
 * @type { Number | Array<Number> } threshold
 * */
var getGlobalBrowser = function getGlobalBrowser() {
  return typeof window === 'undefined' ? null : window;
};

var useIsomorphicLayoutEffect = getGlobalBrowser() ? _react.useLayoutEffect : _react.useEffect;
/**
 * @template R typeof of ref object
 * @param { String } strategy Стратегия гидрации
 * @param { ON | WHEN_VISIBLE | undefined  } options Опции для стратегии
 * @return @component
 * */

var useLazyHydrate = function useLazyHydrate(_ref, ref) {
  var strategy = _ref.strategy,
      options = _ref.options;

  if (!_constants.STRATEGY_WHITE_LIST.includes(strategy)) {
    throw new _StrategyTypeError["default"](strategy);
  }

  var qapi = (0, _getQAPI["default"])();
  var cleanupFns = (0, _react.useRef)(new Set());

  var _useState = (0, _react.useState)(qapi.mode === 'development' || !getGlobalBrowser()),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      hydrated = _useState2[0],
      setHydrated = _useState2[1];

  var runHydrate = (0, _react.useCallback)(function () {
    return setHydrated(true);
  }, []);
  useIsomorphicLayoutEffect(function () {
    // No SSR Content
    if (!ref.current.hasChildNodes()) {
      setHydrated(true);
    }
  }, []);
  (0, _react.useEffect)(function () {
    if (!hydrated) {
      return;
    }

    cleanupFns.current.forEach(function (fn) {
      return fn();
    });
    cleanupFns.current.clear();
  }, [hydrated]);
  (0, _react.useEffect)(function () {
    if (hydrated) {
      return;
    }

    switch (strategy) {
      case _constants.SSR_ONLY:
        return;

      case _constants.ON:
        {
          var events = options.events;

          if (!events) {
            throw new _StategyOptionsError["default"](strategy, options);
          }

          if (!Array.isArray(events)) {
            events = [events];
          }

          events.forEach(function (event) {
            return ref.current.addEventListener(event, runHydrate, {
              once: true,
              capture: true,
              passive: true
            });
          });
          events.forEach(function (event) {
            return cleanupFns.add(function () {
              return ref.current.removeEventListener(event, runHydrate);
            });
          });
          break;
        }

      case _constants.WHEN_VISIBLE:
        {
          var global = getGlobalBrowser();

          if (!global.IntersectionObserver) {
            console.info('IntersectionObserver is not supported by your browser');
            return runHydrate();
          }

          var ioOptions = _objectSpread({
            root: null,
            rootMargin: '150px'
          }, options);

          var io = new IntersectionObserver(function (_ref2) {
            var _ref3 = (0, _slicedToArray2["default"])(_ref2, 1),
                entry = _ref3[0];

            return entry.isIntersecting && runHydrate();
          }, ioOptions);
          io.observe(ref.current);
          cleanupFns.current.add(function () {
            return io.unobserve(ref.current);
          });
          break;
        }

      default:
        break;
    }

    return function () {
      return cleanupFns.current.forEach(function (fn) {
        return fn();
      });
    };
  }, [strategy, options]);
  return hydrated;
};

exports.useLazyHydrate = useLazyHydrate;