import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React from 'react';

function addReactProp(props, name, type, value) {
  if (type === 'string' && typeof value === 'string' && value.trim().length > 0) {
    props[name] = value;
    return;
  }

  if (type === 'boolean' && typeof value === 'boolean' && value) {
    props[name] = value;
    return;
  }

  console.warn("RawHtml: unknown type ".concat(type, " or unsupported value ").concat(value));
}

function createReactScriptElementFromItem(rawKey, codeItem) {
  var props = {};
  addReactProp(props, 'key', 'string', rawKey);
  addReactProp(props, 'rawKey', 'string', rawKey);
  addReactProp(props, 'place', 'string', codeItem.place);
  addReactProp(props, 'children', 'string', codeItem.data.content);
  addReactProp(props, 'src', 'string', codeItem.data.src);
  addReactProp(props, 'async', 'boolean', codeItem.data.async);
  addReactProp(props, 'defer', 'boolean', codeItem.data.defer);
  addReactProp(props, 'type', 'string', codeItem.data.type);
  addReactProp(props, 'crossorigin', 'string', codeItem.data.crossorigin);
  addReactProp(props, 'integrity', 'string', codeItem.data.integrity);
  addReactProp(props, 'nomodule', 'boolean', codeItem.data.nomodule);
  addReactProp(props, 'referrerpolicy', 'string', codeItem.data.referrerpolicy);
  return React.createElement('script', props);
}

function createReactStyleElementFromItem(rawKey, codeItem) {
  var props = {};
  addReactProp(props, 'key', 'string', rawKey);
  addReactProp(props, 'rawKey', 'string', rawKey);
  addReactProp(props, 'place', 'string', codeItem.place);
  addReactProp(props, 'children', 'string', codeItem.data.content);
  return React.createElement('style', props);
}

function createReactLinkElementFromItem(rawKey, codeItem) {
  var props = {};
  addReactProp(props, 'key', 'string', rawKey);
  addReactProp(props, 'rawKey', 'string', rawKey);
  addReactProp(props, 'place', 'string', codeItem.place);
  addReactProp(props, 'href', 'string', codeItem.data.href);
  addReactProp(props, 'rel', 'string', codeItem.data.rel);
  addReactProp(props, 'sizes', 'string', codeItem.data.sizes);
  addReactProp(props, 'type', 'string', codeItem.data.type);
  addReactProp(props, 'media', 'string', codeItem.data.media);
  addReactProp(props, 'as', 'string', codeItem.data.as);
  addReactProp(props, 'crossorigin', 'string', codeItem.data.crossorigin);
  return React.createElement('link', props);
}

function createReactMetaElementFromItem(rawKey, codeItem) {
  var props = {};
  addReactProp(props, 'key', 'string', rawKey);
  addReactProp(props, 'rawKey', 'string', rawKey);
  addReactProp(props, 'place', 'string', codeItem.place);
  addReactProp(props, 'charset', 'string', codeItem.data.charset);
  addReactProp(props, 'name', 'string', codeItem.data.name);
  addReactProp(props, 'content', 'string', codeItem.data.content);
  addReactProp(props, 'http-equiv', 'string', codeItem.data['http-equiv']);
  addReactProp(props, 'itemprop', 'string', codeItem.data.itemprop);
  return React.createElement('meta', props);
}

var allowedTags = {
  script: createReactScriptElementFromItem,
  style: createReactStyleElementFromItem,
  link: createReactLinkElementFromItem,
  meta: createReactMetaElementFromItem
};

function codeItemToReactElement(rawKey, codeItem) {
  if (allowedTags[codeItem.tag]) {
    return allowedTags[codeItem.tag](rawKey, codeItem);
  }

  console.warn("RawHtml: unsupported tag ".concat(codeItem.tag));
}

export default function codeItemsToRawHtmlBody(codeItems) {
  return Object.entries(codeItems).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        rawKey = _ref2[0],
        codeItem = _ref2[1];

    return codeItemToReactElement(rawKey, codeItem);
  });
}