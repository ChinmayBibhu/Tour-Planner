import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
export var FILTER_MODES = Object.freeze({
  exclude: 'exclude',
  include: 'include'
});
export var PageTreeNode = /*#__PURE__*/function () {
  function PageTreeNode() {
    _classCallCheck(this, PageTreeNode);
  }

  _createClass(PageTreeNode, [{
    key: "findSubtreeByUrl",
    value: function findSubtreeByUrl(url) {
      var result = this._findSubtreeByUrl(url);

      if (result) return result;
      result = this._findSubtreeById(url);
      if (result) return result;
      console.warn("Unexpected! Url ".concat(url, " not found!"));
      return this;
    }
  }, {
    key: "_findSubtreeByUrl",
    value: function _findSubtreeByUrl(url) {
      if (this.absoluteUrl === url) {
        return this;
      }

      if (this.children) {
        var result = null;
        this.children.some(function (el) {
          result = el._findSubtreeByUrl(url);
          return result;
        });
        return result;
      }

      return null;
    }
  }, {
    key: "_findSubtreeById",
    value: function _findSubtreeById(id) {
      if (this.id === id) {
        return this;
      }

      if (this.children) {
        var result = null;
        this.children.some(function (el) {
          result = el._findSubtreeById(id);
          return result;
        });
        return result;
      }

      return null;
    }
  }, {
    key: "filterByPages",
    value: function filterByPages(mode, pages) {
      switch (mode) {
        case FILTER_MODES.exclude:
          if (this.children) {
            this.children = this.children.flatMap(function (el) {
              if (pages.includes(el.absoluteUrl)) {
                return [];
              }

              if (el.children) {
                el = el.filterByPages(mode, pages);
              }

              return [el];
            });
          }

          return this;

        case FILTER_MODES.include:
          if (this.children) {
            this.children = this.children.flatMap(function (el) {
              var _el, _el$children;

              if (el.children) {
                el = el.filterByPages(mode, pages);
              }

              if (pages.includes(el.absoluteUrl) || ((_el = el) === null || _el === void 0 ? void 0 : (_el$children = _el.children) === null || _el$children === void 0 ? void 0 : _el$children.length) > 0) {
                return [el];
              }

              return [];
            });
          }

          return this;

        default:
          console.warn('Unexpected mode');
          return this;
      }
    }
  }, {
    key: "truncate",
    value: function truncate(depth) {
      return this._trunc(depth, 0);
    }
  }, {
    key: "_trunc",
    value: function _trunc(depth) {
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this.children) {
        this.children = this.children.flatMap(function (el) {
          if (level >= depth) {
            return [];
          }

          return [el._trunc(depth, level + 1)];
        });
      }

      return this;
    }
  }], [{
    key: "fromPages",
    value: function fromPages(pages) {
      return this._fromPages(pages);
    }
  }, {
    key: "_fromPages",
    value: function _fromPages(pages) {
      var _this = this;

      var rootID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';
      var baseURL = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var node = pages[rootID];
      var childNodes = node.children;
      var result = new PageTreeNode();
      result.id = node.id;
      result.name = node.name;
      result.pageUrl = node.pageUrl;
      result.absoluteUrl = rootID !== 'root' ? "".concat(baseURL, "/").concat(node.pageUrl) : '';

      if (childNodes) {
        result.children = childNodes.map(function (el) {
          return _this._fromPages(pages, el, result.absoluteUrl);
        });
      }

      return result;
    }
  }]);

  return PageTreeNode;
}();