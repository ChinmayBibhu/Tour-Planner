import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import atomize from '@quarkly/atomize';
import { useRouteMatch } from 'react-router-dom';
import { useMatch } from '@reach/router';
import { Link } from '@quarkly/widgets';
import { useOverrides } from '../../hooks';
import { defaultProps, propInfo, overrides } from './props';
import { PageTreeNode } from './utils';
import getAPI from '../../utils/getQAPI';
var Ul = atomize.ul();
var Li = atomize.li();

var Item = function Item(_ref) {
  var _item$children;

  var _ref$exact = _ref.exact,
      exact = _ref$exact === void 0 ? false : _ref$exact,
      override = _ref.override,
      item = _ref.item;
  var hasSub = !!(item === null || item === void 0 ? void 0 : (_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length);
  var common = {
    exact: exact,
    override: override,
    item: item
  };

  var _ref2 = getAPI() || {},
      projectType = _ref2.projectType;

  var href = item.absoluteUrl;
  var match = null;

  if (projectType === 'gatsby') {
    match = useMatch(href) || null; // eslint-disable-line
  } else {
    match = useRouteMatch({
      path: href,
      exact: exact
    }) || null; // eslint-disable-line
  }

  var name = item.name,
      pageUrl = item.pageUrl;
  var linkProps = override('link', match && 'link-active', "link-".concat(pageUrl), {
    defaultKey: "link-".concat(pageUrl)
  });
  return /*#__PURE__*/React.createElement(Li, override('item', match && 'item-active', "item-".concat(pageUrl), {
    defaultKey: "item-".concat(pageUrl)
  }), /*#__PURE__*/React.createElement(Link, _extends({
    href: href
  }, linkProps), linkProps.children || name), hasSub && /*#__PURE__*/React.createElement(Wrapper, _extends({
    tree: item
  }, common, override('sub', "sub-".concat(pageUrl)))));
};

var Wrapper = function Wrapper(_ref3) {
  var _tree$children;

  var override = _ref3.override,
      exact = _ref3.exact,
      tree = _ref3.tree,
      rest = _objectWithoutProperties(_ref3, ["override", "exact", "tree"]);

  var common = {
    override: override,
    exact: exact,
    tree: tree
  };
  var list = (_tree$children = tree === null || tree === void 0 ? void 0 : tree.children) !== null && _tree$children !== void 0 ? _tree$children : [];
  return /*#__PURE__*/React.createElement(Ul, rest, list.map(function (item) {
    return /*#__PURE__*/React.createElement(Item, _extends({
      key: item.id,
      item: item
    }, common));
  }));
};

var Menu = function Menu(_ref4) {
  var _ref4$rootId = _ref4.rootId,
      rootUrl = _ref4$rootId === void 0 ? '' : _ref4$rootId,
      depth = _ref4.depth,
      filterMode = _ref4.filterMode,
      origFilterPages = _ref4.filterPages,
      exact = _ref4['exact-active-match'],
      props = _objectWithoutProperties(_ref4, ["rootId", "depth", "filterMode", "filterPages", "exact-active-match"]);

  var _useOverrides = useOverrides(props, overrides, defaultProps),
      override = _useOverrides.override,
      rest = _useOverrides.rest;

  var pages = getAPI().pages || {};
  var filterPages = (origFilterPages === null || origFilterPages === void 0 ? void 0 : origFilterPages.length) > 0 ? origFilterPages.split(',') : [];
  var tree = PageTreeNode.fromPages(pages).findSubtreeByUrl(rootUrl).filterByPages(filterMode, filterPages).truncate(depth);
  return /*#__PURE__*/React.createElement(Wrapper, _extends({
    tree: tree,
    depth: depth,
    exact: exact,
    override: override,
    padding: "6px",
    margin: "0px",
    "list-style": "none"
  }, rest));
};

Object.assign(Menu, {
  title: 'Menu',
  description: {
    en: 'Use this component to add a simple menu to your website',
    ru: 'Простое меню для вашего сайта'
  },
  defaultProps: defaultProps,
  overrides: overrides,
  propInfo: propInfo
});
export default Menu;