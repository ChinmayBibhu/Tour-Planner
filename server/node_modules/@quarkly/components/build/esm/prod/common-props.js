import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

export var commonProps = {
  id: {
    type: 'string',
    control: 'input',
    category: 'Selectors',
    description: {
      en: 'The id global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking, scripting, or styling.'
    },
    weight: 1
  },
  className: {
    control: 'input',
    category: 'Selectors',
    description: {
      en: 'The className  is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and Javascript to select and access specific elements via the class selectors or functions. If you need to add more than one class, separate them with spaces.'
    },
    weight: 1
  }
};
var userSelectProp = {
  'user-select': {
    control: 'radio-group',
    variants: ['none', 'auto'],
    category: 'Pointer Events',
    description: {
      en: 'The user-select property controls whether the user can select text. If the value is none, the text of the element and its sub-elements is not selectable. If the value is all, the text of the element and its sub-elements is selectable.'
    }
  }
};
var pointerEventsProp = {
  'pointer-events': {
    control: 'radio-group',
    variants: ['none', 'auto'],
    category: 'Pointer Events',
    description: {
      en: 'The pointer-events property sets under what circumstances (if any) a particular element can become the target of pointer events. If the value is none, the element is never the target of pointer events. If the value is auto, the element behaves as it would if the pointer-events property were not specified.'
    }
  }
};
export var pointerEventsCategoryBase = _objectSpread({}, pointerEventsProp);
export var pointerEventsCategoryBaseDefaults = {
  'pointer-events': 'auto'
};
export var pointerEventsCategoryText = _objectSpread({}, userSelectProp, {}, pointerEventsProp);
export var pointerEventsCategoryTextDefaults = {
  'user-select': 'auto',
  'pointer-events': 'auto'
};
export var pointerEventsCategoryButton = pointerEventsCategoryText;
export var pointerEventsCategoryButtonDefaults = {
  'user-select': 'none',
  'pointer-events': 'auto'
};