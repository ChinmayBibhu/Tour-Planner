import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper";

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var StrategyTypeError = /*#__PURE__*/function (_Error) {
  _inherits(StrategyTypeError, _Error);

  var _super = _createSuper(StrategyTypeError);

  function StrategyTypeError(type) {
    var _this;

    _classCallCheck(this, StrategyTypeError);

    _this = _super.call(this, "Invalid type of strategy: ".concat(type));
    _this.name = 'Strategy type error';
    return _this;
  }

  return StrategyTypeError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

export default StrategyTypeError;