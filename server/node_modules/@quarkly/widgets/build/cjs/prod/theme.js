"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asQuark = asQuark;
exports["default"] = exports.Provider = void 0;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _atomize = require("@quarkly/atomize");

var _styledComponents = require("styled-components");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  :root {\n    ", "\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var QuarkContext = _react["default"].createContext();

var Provider = QuarkContext.Provider;
exports.Provider = Provider;

function asQuark(Component) {
  return _react["default"].forwardRef(function (props, ref) {
    return _react["default"].createElement(QuarkContext.Consumer, null, function (qState) {
      return _react["default"].createElement(Component, (0, _extends2["default"])({}, props, {
        ref: ref,
        qState: qState
      }));
    });
  });
}

var qStateDefault = {
  themes: {}
};
var GlobalStyles = (0, _styledComponents.createGlobalStyle)(_templateObject(), function (props) {
  var css = ''; // css

  for (var groupName in props.theme) {
    var group = props.theme[groupName];
    if ((0, _typeof2["default"])(group) !== 'object') continue;

    for (var key in group) {
      var value = group[key];
      if (typeof value !== 'string') continue;
      css += "--qtheme-".concat(groupName, "-").concat(key, ": ").concat((0, _atomize.transformVar)(key, value), ";\n");
    }
  } // components


  var components = props.theme.components;

  for (var componentName in components) {
    var _props = components[componentName];

    for (var propName in _props) {
      var variants = _props[propName];
      if ((0, _typeof2["default"])(variants) !== 'object') continue;

      for (var variant in variants) {
        var _value = variants[variant];
        if (typeof _value !== 'string') continue;
        css += "--qtheme-cmp-".concat(componentName, "-").concat(propName, "-").concat(variant, ": ").concat(_value, ";\n");
      }
    }
  }

  return css;
});
var Theme = asQuark(function (props) {
  var name = props.name;
  var _props$qState = props.qState,
      qState = _props$qState === void 0 ? qStateDefault : _props$qState;
  var theme = props.theme;

  if (name && qState.themes[name]) {
    theme = qState.themes[name];
  }

  return _react["default"].createElement(_styledComponents.ThemeProvider, {
    theme: theme
  }, _react["default"].createElement(_react["default"].Fragment, null, _react["default"].createElement(GlobalStyles, {
    theme: theme
  }), props.children));
});
Theme.displayName = 'Theme';
Theme.propInfo = {};
Theme.description = {
  en: 'site theme',
  ru: 'тема сайта'
};
var _default = Theme;
exports["default"] = _default;