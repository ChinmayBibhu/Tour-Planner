"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.commonTextPropsDefaults = exports.commonTextProps = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var _commonProps = require("./common-props");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var commonTextProps = _objectSpread({
  'overflow-wrap': {
    type: 'string',
    category: 'Extra styles',
    control: 'select',
    variants: ['normal', 'break-word', 'anywhere'],
    title: 'Overflow wrap',
    description: {
      en: 'overflow-wrap - sets whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box',
      ru: 'overflow-wrap - устанавливает правила расстановки переносов строк внутри неразрывной строки, чтобы избежать выхода текста за границы элемента'
    }
  },
  'word-break': {
    type: 'string',
    category: 'Extra styles',
    control: 'select',
    variants: ['normal', 'break-all', 'keep-all', 'break-word'],
    title: 'Word break',
    description: {
      en: 'word-break - sets whether line breaks appear wherever the text would otherwise overflow its content box',
      ru: 'word-break - определяет, где будет установлен перевод на новую строку в случае превышения текстом границ блока'
    }
  },
  'white-space': {
    type: 'string',
    category: 'Extra styles',
    control: 'select',
    variants: ['normal', 'nowrap', 'pre', 'pre-wrap', 'pre-line', 'break-spaces'],
    title: 'White space',
    description: {
      en: 'white-space - sets how white space inside an element is handled',
      ru: 'white-space - sets how white space inside an element is handled'
    }
  },
  'text-indent': {
    type: 'string',
    category: 'Extra styles',
    control: 'input',
    title: 'Text indent',
    description: {
      en: 'text-indent - sets the length of empty space (indentation) that is put before lines of text in a block',
      ru: 'text-indent - устанавливает размер красной строки'
    }
  },
  'text-overflow': {
    type: 'string',
    category: 'Extra styles',
    title: 'Text overflow',
    control: 'select',
    variants: ['clip', 'ellipsis'],
    description: {
      en: 'text-overflow - sets how hidden overflow content is signaled to users',
      ru: 'text-overflow - устанавливает как скрытый контент обозначается пользователю'
    }
  },
  hyphens: {
    type: 'string',
    category: 'Extra styles',
    title: 'Hyphens',
    control: 'select',
    variants: ['none', 'manual', 'auto'],
    description: {
      en: 'hyphens - specifies how words should be hyphenated when text wraps across multiple lines',
      ru: 'hyphens - определяет способ расстановки переносов слов в блоке текста'
    }
  }
}, _commonProps.commonProps, {}, _commonProps.pointerEventsCategoryText);

exports.commonTextProps = commonTextProps;

var commonTextPropsDefaults = _objectSpread({
  'overflow-wrap': 'normal',
  'word-break': 'normal',
  'white-space': 'normal',
  'text-indent': '0',
  'text-overflow': 'clip',
  hyphens: 'manual'
}, _commonProps.pointerEventsCategoryTextDefaults);

exports.commonTextPropsDefaults = commonTextPropsDefaults;

var _default = _atomize["default"].div({
  name: 'Text',
  effects: {
    hover: ':hover',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type',
    before: ':before',
    after: ':after',
    firstLine: '::first-line',
    firstLetter: '::first-letter',
    selection: '::selection',
    empty: ':empty'
  },
  normalize: true,
  mixins: true,
  description: {
    en: 'Text element — text in different variants: paragraph, heading, etc.',
    ru: 'Элемент text — текст в различных вариантах: параграф, заголовок, и другие'
  },
  propInfo: _objectSpread({
    as: {
      type: 'string',
      category: 'Main',
      control: 'select',
      variants: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'span', 'div']
    }
  }, commonTextProps)
}, _objectSpread({
  as: 'div',
  'margin-top': '16px',
  'margin-bottom': '16px',
  'min-width': '8px',
  'min-height': '8px'
}, commonTextPropsDefaults));

exports["default"] = _default;