"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _atomize = _interopRequireDefault(require("@quarkly/atomize"));

var VideoBase =
/*#__PURE__*/
function (_React$PureComponent) {
  (0, _inherits2["default"])(VideoBase, _React$PureComponent);

  function VideoBase() {
    (0, _classCallCheck2["default"])(this, VideoBase);
    return (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(VideoBase).apply(this, arguments));
  }

  (0, _createClass2["default"])(VideoBase, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          src = _this$props.src,
          mute = _this$props.mute,
          showControls = _this$props.showControls,
          showInfo = _this$props.showInfo,
          loop = _this$props.loop,
          autoPlay = _this$props.autoPlay,
          className = _this$props.className;
      var parseUrl = src ? new URL(src) : '';
      var videoHost = parseUrl.hostname;
      var typeOfVideo;
      var videoId;
      var muteOption;
      var autoPlayOption;
      var showControlsOption;
      var loopOption;
      var showInfoOptionYoutube;
      var showInfoOptionVimeo; // YOUTUBE autoplay - добавляем к URL-строке &autoplay=1 (0* или 1)
      // YOUTUBE showControls - добавляем к URL-строке &controls=1 (0 или 1* или 2)
      // YOUTUBE loop - добавляем к URL-строке &loop=1 (0* или 1)
      // YOUTUBE showInfo - добавляем к URL-строке &showinfo=1 (0 или 1*)
      // YOUTUBE mute - добавляем к URL-строке &mute=1 (0* или 1)
      // TODO: VIMEO ссылки на видео могут быть разные https://developer.vimeo.com/api/oembed/videos
      // VIMEO autoplay - добавляем к URL-строке &autoplay=1 (0* или 1)
      // VIMEO showControls - добавляем к URL-строке &controls=1 (0 или 1* или 2)
      // VIMEO loop - добавляем к URL-строке &loop=1 (0* или 1)
      // VIMEO showInfo - добавляем &title=0 &byline=0 (0 или 1*)
      // VIMEO mute - добавляем к URL-строке &muted=1 (0* или 1)

      if (videoHost === 'www.youtube.com' || videoHost === 'youtube.com' || videoHost === 'youtu.be') {
        videoId = parseUrl.searchParams.get('v');
        typeOfVideo = 'youtube';
      } else if (videoHost === 'vimeo.com') {
        videoId = parseUrl.pathname;
        typeOfVideo = 'vimeo';
      } else {
        typeOfVideo = 'unknown';
      } // autoplay


      if (autoPlay) {
        autoPlayOption = '&autoplay=1';
      } else {
        autoPlayOption = '&autoplay=0';
      } // showControls


      if (showControls) {
        showControlsOption = '&controls=1';
      } else {
        showControlsOption = '&controls=0';
      } // loopOption


      if (loop) {
        loopOption = '&loop=1';
      } else {
        loopOption = '&loop=0';
      } // showInfo vimeo


      if (showInfo && typeOfVideo === 'vimeo') {
        showInfoOptionVimeo = '&title=1&byline=1';
      } else {
        showInfoOptionVimeo = '&title=0&byline=0';
      } // showInfo youtube


      if (showInfo && typeOfVideo === 'youtube') {
        showInfoOptionYoutube = '&showinfo=1';
      } else {
        showInfoOptionYoutube = '&showinfo=0';
      }

      var showInfoOption = typeOfVideo === 'youtube' ? showInfoOptionYoutube : showInfoOptionVimeo; // MUTE

      if (mute && typeOfVideo === 'youtube') {
        muteOption = '&mute=1';
      } else if (mute && typeOfVideo === 'vimeo') {
        muteOption = '&muted=1';
      } else if (mute === false && typeOfVideo === 'vimeo') {
        muteOption = '&muted=0';
      } else {
        muteOption = '&mute=0';
      }

      var extraOptions = muteOption + autoPlayOption + showControlsOption + loopOption + showInfoOption;
      return _react["default"].createElement("iframe", {
        className: className,
        title: "video",
        src: getVideoUrlByType(typeOfVideo, videoId, extraOptions),
        frameBorder: "0",
        allowFullScreen: true,
        allow: "autoplay; fullscreen"
      });
    }
  }]);
  return VideoBase;
}(_react["default"].PureComponent);

var getVideoUrlByType = function getVideoUrlByType(type, videoId, extraOptions) {
  if (type === 'youtube') {
    return "https://www.youtube.com/embed/".concat(videoId, "?rel=0").concat(extraOptions);
  } else if (type === 'vimeo') {
    return "https://player.vimeo.com/video".concat(videoId, "?portrait=0&responsive=1").concat(extraOptions);
  }

  return "https://www.youtube.com/embed/JNFX32Hz_N0?rel=0".concat(extraOptions);
};

var Video = (0, _atomize["default"])(VideoBase)({
  name: 'Video',
  effects: {
    hover: ':hover'
  },
  normalize: true,
  mixins: true,
  description: {
    en: 'Video element — video from youtube or vimeo',
    ru: 'Элемент Video — видео с youtube или vimeo'
  },
  propInfo: {
    src: {
      type: 'string',
      category: 'Main',
      description: {
        en: 'src — video address',
        ru: 'src — адрес видео'
      }
    },
    mute: {
      type: 'boolean',
      category: 'Main',
      description: {
        en: 'mute — plays a video without sound',
        ru: 'mute — проигрывать без звука'
      },
      control: 'checkbox'
    },
    showControls: {
      type: 'boolean',
      category: 'Main',
      description: {
        en: 'showControls — plays a video with controls',
        ru: 'showControls — проигрывать с элементами управления'
      },
      control: 'checkbox'
    },
    showInfo: {
      type: 'boolean',
      category: 'Main',
      description: {
        en: 'showInfo — displays information about a video during the playback',
        ru: 'showInfo — проигрывать с информацей о видео'
      },
      control: 'checkbox'
    },
    loop: {
      type: 'boolean',
      category: 'Main',
      description: {
        en: 'loop —  plays a video again once it ends',
        ru: 'loop — автоповтор видео после окончания'
      },
      control: 'checkbox'
    },
    autoPlay: {
      type: 'boolean',
      category: 'Main',
      description: {
        en: 'autoPlay — autoplay of a video',
        ru: 'autoPlay — автовоспроизведение'
      },
      control: 'checkbox'
    }
  }
}, {
  display: 'block'
});
var _default = Video;
exports["default"] = _default;