import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef } from 'react';
import atomize from '@quarkly/atomize';
import { AbstractLink } from '../utils/abstractLink';
import isEmptyChildren from '../utils/isEmptyChildren';
import Placeholder from './placeholder';
import { commonProps, pointerEventsCategoryBase, pointerEventsCategoryBaseDefaults } from './common-props';
var LinkBox = forwardRef(function (_ref, ref) {
  var children = _ref.children,
      rest = _objectWithoutProperties(_ref, ["children"]);

  return React.createElement(AbstractLink, _extends({
    ref: ref
  }, rest), isEmptyChildren(children) && React.createElement(Placeholder, {
    message: "DROP HERE"
  }), children);
});
export default atomize(LinkBox)({
  name: 'LinkBox',
  effects: {
    link: ':link',
    hover: ':hover',
    visited: ':visited',
    active: ':active',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type',
    before: ':before',
    after: ':after',
    firstLine: '::first-line',
    firstLetter: '::first-letter',
    selection: '::selection',
    empty: ':empty'
  },
  forwardCssProperties: false,
  normalize: true,
  mixins: true,
  description: {
    en: 'Text element — text in different variants: paragraph, heading, etc.',
    ru: 'Элемент text — текст в различных вариантах: параграф, заголовок, и другие'
  },
  propInfo: _objectSpread({
    href: {
      weight: 1,
      control: 'href',
      category: 'Main',
      description: {
        en: 'href — destination address where the link takes to',
        ru: 'href — адрес назначения, по которому направляет ссылка'
      }
    },
    target: {
      weight: 1,
      control: 'select',
      variants: ['_self', '_blank', '_parent', '_top'],
      category: 'Main'
    }
  }, commonProps, {}, pointerEventsCategoryBase)
}, _objectSpread({
  'text-decoration-line': 'initial',
  'align-items': 'center',
  'flex-direction': 'column',
  'justify-content': 'center',
  color: 'initial',
  display: 'flex',
  'empty-border-width': '1px',
  'empty-border-style': 'solid',
  'empty-border-color': 'LightGray',
  'empty-min-width': '64px',
  'empty-min-height': '64px',
  href: '#'
}, pointerEventsCategoryBaseDefaults));