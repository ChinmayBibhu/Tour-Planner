import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import atomize from '@quarkly/atomize';
import { commonProps, pointerEventsCategoryText } from './common-props';
var List = atomize.ul({
  name: 'List',
  effects: {
    hover: ':hover',
    focus: ':focus',
    active: ':active',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type',
    before: ':before',
    after: ':after',
    empty: ':empty'
  },
  normalize: true,
  mixins: true,
  propInfo: _objectSpread({
    as: {
      weight: 1,
      type: 'string',
      category: 'Main',
      control: 'select',
      variants: ['ul', 'ol']
    },
    'list-style-type': {
      weight: 1,
      type: 'string',
      category: 'Styles',
      control: 'select',
      variants: ['circle', 'disc', 'square', 'armenian', 'decimal', 'decimal-leading-zero', 'georgian', 'lower-alpha', 'lower-greek', 'lower-latin', 'lower-roman', 'upper-alpha', 'upper-latin', 'upper-roman', 'none', 'inherit', 'initial', 'unset']
    }
  }, commonProps, {}, pointerEventsCategoryText)
});

var Ul = function Ul(_ref) {
  var children = _ref.children,
      rest = _objectWithoutProperties(_ref, ["children"]);

  return React.createElement(List, rest, React.Children.map(children, function (child, i) {
    return child ? React.createElement("li", {
      key: child.key || i
    }, child) : child;
  }));
};

Ul.propInfo = List.propInfo;
Ul.description = {
  en: 'List element — contains entities of the same level',
  ru: 'Элемент link — ссылка, которая может быть оберткой для других элементов'
};
export default Ul;