import _typeof from "@babel/runtime/helpers/esm/typeof";
import _taggedTemplateLiteral from "@babel/runtime/helpers/esm/taggedTemplateLiteral";
import _extends from "@babel/runtime/helpers/esm/extends";

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  :root {\n    ", "\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

import React from 'react';
import { transformVar } from '@quarkly/atomize';
import { createGlobalStyle, ThemeProvider } from 'styled-components';
var QuarkContext = React.createContext();
var Provider = QuarkContext.Provider;
export { Provider };
export function asQuark(Component) {
  return React.forwardRef(function (props, ref) {
    return React.createElement(QuarkContext.Consumer, null, function (qState) {
      return React.createElement(Component, _extends({}, props, {
        ref: ref,
        qState: qState
      }));
    });
  });
}
var qStateDefault = {
  themes: {}
};
var GlobalStyles = createGlobalStyle(_templateObject(), function (props) {
  var css = ''; // css

  for (var groupName in props.theme) {
    var group = props.theme[groupName];
    if (_typeof(group) !== 'object') continue;

    for (var key in group) {
      var value = group[key];
      if (typeof value !== 'string') continue;
      css += "--qtheme-".concat(groupName, "-").concat(key, ": ").concat(transformVar(key, value), ";\n");
    }
  } // components


  var components = props.theme.components;

  for (var componentName in components) {
    var _props = components[componentName];

    for (var propName in _props) {
      var variants = _props[propName];
      if (_typeof(variants) !== 'object') continue;

      for (var variant in variants) {
        var _value = variants[variant];
        if (typeof _value !== 'string') continue;
        css += "--qtheme-cmp-".concat(componentName, "-").concat(propName, "-").concat(variant, ": ").concat(_value, ";\n");
      }
    }
  }

  return css;
});
var Theme = asQuark(function (props) {
  var name = props.name;
  var _props$qState = props.qState,
      qState = _props$qState === void 0 ? qStateDefault : _props$qState;
  var theme = props.theme;

  if (name && qState.themes[name]) {
    theme = qState.themes[name];
  }

  return React.createElement(ThemeProvider, {
    theme: theme
  }, React.createElement(React.Fragment, null, React.createElement(GlobalStyles, {
    theme: theme
  }), props.children));
});
Theme.displayName = 'Theme';
Theme.propInfo = {};
Theme.description = {
  en: 'site theme',
  ru: 'тема сайта'
};
export default Theme;