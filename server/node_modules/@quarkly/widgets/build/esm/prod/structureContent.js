import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import React, { useCallback, useMemo } from 'react';
import { Box, Placeholder } from './index';
import { useOverrides } from '@quarkly/components';
import getQAPI from '../utils/getQAPI';
var overrides = {
  Cell: {
    kind: 'Box',
    props: {}
  }
};
var ordinalIndicators = {
  1: 'st',
  2: 'nd',
  3: 'rd'
};

var StructureContent = function StructureContent(_ref) {
  var iw = _ref.iw,
      imaxw = _ref.imaxw,
      iminw = _ref.iminw,
      cellsTotal = _ref.cellsTotal,
      cellsGroup = _ref.cellsGroup,
      props = _objectWithoutProperties(_ref, ["iw", "imaxw", "iminw", "cellsTotal", "cellsGroup"]);

  var devMode = useMemo(function () {
    return getQAPI().mode === 'development';
  }, []);

  var _useOverrides = useOverrides(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest,
      ChildPlaceholder = _useOverrides.ChildPlaceholder;

  var getOrdinalNumber = useCallback(function (index) {
    var numb = Math.abs(index % cellsGroup);
    return numb + (ordinalIndicators[numb] || 'th');
  }, [cellsGroup]);
  return React.createElement(Box, _extends({
    width: iw,
    "max-width": imaxw,
    "min-width": iminw,
    "min-height": "16px",
    margin: "0 auto",
    "grid-template-columns": "repeat(".concat(cellsTotal, ", 1fr)"),
    "grid-template-rows": "minmax(min-content, max-content)",
    "grid-auto-rows": "minmax(min-content, max-content)",
    "grid-gap": "16px",
    display: "grid",
    "data-qkind": "StructureContent"
  }, rest), Array(cellsTotal).fill().map(function (__, index) {
    return React.createElement(Box, _extends({
      key: "cell-".concat(index)
    }, override('Cell', "Cell ".concat(getOrdinalNumber(index)), "Cell ".concat(index), {
      defaultKey: "Cell ".concat(getOrdinalNumber(index))
    })), React.createElement(ChildPlaceholder, {
      slot: "cell-".concat(index)
    }), devMode && !override("cell-".concat(index)).children && React.createElement(Placeholder, {
      message: "DROP HERE"
    }));
  }), children);
};

var effects = {
  hover: ':hover'
};
Object.assign(StructureContent, {
  effects: effects,
  overrides: overrides
});
export default StructureContent;