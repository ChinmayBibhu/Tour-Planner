import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { forwardRef } from 'react';
import atomize from '@quarkly/atomize';
import Link from './link';
import { commonProps, pointerEventsCategoryButton, pointerEventsCategoryButtonDefaults } from './common-props';
var PrimitiveButton = atomize.button();
var Button = forwardRef(function (_ref, ref) {
  var href = _ref.href,
      target = _ref.target,
      type = _ref.type,
      otherProps = _objectWithoutProperties(_ref, ["href", "target", "type"]);

  if (type !== 'link') {
    return React.createElement(PrimitiveButton, _extends({
      ref: ref,
      type: type
    }, otherProps));
  }

  return React.createElement(Link, _extends({
    ref: ref,
    href: href,
    target: target
  }, otherProps));
});
export default atomize(Button)({
  name: 'Button',
  effects: {
    hover: ':hover',
    focus: ':focus',
    active: ':active',
    disabled: ':disabled',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type',
    before: ':before',
    after: ':after'
  },
  description: {
    en: 'button element — button that performs an action. For example, can be used in forms to submit data',
    ru: 'Элемент button — кнопка, которая выполняет какое-либо действие. Например, отправка данных формы'
  },
  forwardCssProperties: false,
  propInfo: _objectSpread({
    type: {
      control: 'select',
      variants: ['submit', 'button', 'link'],
      category: 'Main'
    },
    disabled: {
      control: 'checkbox',
      category: 'Main'
    },
    href: {
      weight: 1,
      control: 'href',
      category: 'Main',
      description: {
        en: 'href — destination address where the link takes to',
        ru: 'href — адрес назначения, по которому направляет ссылка'
      }
    },
    target: {
      weight: 1,
      control: 'select',
      variants: ['_self', '_blank', '_parent', '_top'],
      category: 'Main'
    }
  }, commonProps, {}, pointerEventsCategoryButton)
}, _objectSpread({
  type: 'submit',
  display: 'inline-block',
  'disabled-background': '--color-grey',
  'focus-box-shadow': '0 0 0 2px --color-primary',
  'border-width': '0px',
  'border-style': 'none',
  background: '--color-primary',
  color: '--light',
  cursor: 'pointer',
  overflow: 'visible',
  outline: 'none',
  'user-select': 'none',
  'box-sizing': 'border-box',
  'border-radius': '2px',
  'padding-top': '8px',
  'padding-bottom': '8px',
  'padding-left': '24px',
  'padding-right': '24px',
  font: '--base'
}, pointerEventsCategoryButtonDefaults));