import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import atomize from '@quarkly/atomize';
import { commonProps, pointerEventsCategoryBase, pointerEventsCategoryBaseDefaults } from './common-props';
export default atomize.div({
  name: 'Box',
  effects: {
    hover: ':hover',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type',
    before: ':before',
    after: ':after',
    empty: ':empty'
  },
  normalize: true,
  mixins: true,
  description: {
    en: 'box element — auxiliary container with arbitrary sizes for different tasks',
    ru: 'Элемент box — вспомогательный контейнер с произвольными размерами для различных задач'
  },
  propInfo: _objectSpread({
    as: {
      type: 'string',
      category: 'Main',
      control: 'select',
      variants: ['article', 'aside', 'blockquote', 'div', 'figcaption', 'figure', 'footer', 'header', 'hgroup', 'main', 'nav', 'section']
    }
  }, commonProps, {}, pointerEventsCategoryBase)
}, _objectSpread({
  as: 'div'
}, pointerEventsCategoryBaseDefaults));