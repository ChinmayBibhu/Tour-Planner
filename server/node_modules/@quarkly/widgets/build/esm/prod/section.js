import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useRef, forwardRef, useImperativeHandle } from 'react';
import Box from './box';
import SectionContent from './sectionContent';
import { useOverrides, useLazyHydrate, WHEN_VISIBLE } from '@quarkly/components';
import { commonProps, pointerEventsCategoryBase, pointerEventsCategoryBaseDefaults } from './common-props';
var overrides = {
  sectionContent: {
    props: {}
  }
};

var defaultProps = _objectSpread({
  as: 'section',
  width: '100%',
  margin: '0',
  padding: '24px 0',
  'inner-width': '--cmp-section-width-default',
  'inner-min-width': '--cmp-section-minWidth-default',
  'inner-max-width': '--cmp-section-maxWidth-default',
  'lazy-load': true
}, pointerEventsCategoryBaseDefaults);

var Section = forwardRef(function (_ref, forwardedRef) {
  var iw = _ref['inner-width'],
      imaxw = _ref['inner-max-width'],
      iminw = _ref['inner-min-width'],
      lazyLoad = _ref['lazy-load'],
      props = _objectWithoutProperties(_ref, ["inner-width", "inner-max-width", "inner-min-width", "lazy-load"]);

  var _useOverrides = useOverrides(props, overrides, defaultProps),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var ref = useRef(null);
  useImperativeHandle(forwardedRef, function () {
    return ref.current;
  });
  var render = useLazyHydrate({
    strategy: WHEN_VISIBLE
  }, ref);

  if (!render && lazyLoad) {
    return React.createElement(Box, _extends({
      display: "flex"
    }, rest, {
      ref: ref,
      dangerouslySetInnerHTML: {
        __html: ''
      }
    }));
  }

  return React.createElement(Box, _extends({
    display: "flex"
  }, rest, {
    ref: ref
  }), React.createElement(SectionContent, _extends({
    iw: iw,
    imaxw: imaxw,
    iminw: iminw
  }, override('SectionContent')), children));
});

var propInfo = _objectSpread({
  'inner-width': {
    weight: 1,
    library: 'components.section.width',
    control: 'input',
    transformer: 'width',
    category: 'Main'
  },
  'inner-min-width': {
    weight: 1,
    library: 'components.section.minWidth',
    control: 'input',
    transformer: 'width',
    category: 'Main'
  },
  'inner-max-width': {
    weight: 1,
    library: 'components.section.maxWidth',
    control: 'input',
    transformer: 'width',
    category: 'Main'
  },
  'lazy-load': {
    type: 'boolean',
    control: 'checkbox',
    category: 'Main'
  }
}, commonProps, {}, pointerEventsCategoryBase);

var effects = {
  hover: ':hover'
};
export default Object.assign(Section, {
  overrides: overrides,
  defaultProps: defaultProps,
  effects: effects,
  propInfo: propInfo
});