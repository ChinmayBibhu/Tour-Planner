import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { useMemo, useRef, forwardRef, useImperativeHandle } from 'react';
import { Box, StructureContent } from './index';
import { useOverrides, useLazyHydrate, WHEN_VISIBLE } from '@quarkly/components';
import { commonProps, pointerEventsCategoryBase, pointerEventsCategoryBaseDefaults } from './common-props';
var overrides = {
  Content: {
    props: {}
  }
};
var Structure = forwardRef(function (_ref, forwardedRef) {
  var iw = _ref['inner-width'],
      imaxw = _ref['inner-max-width'],
      iminw = _ref['inner-min-width'],
      lazyLoad = _ref['lazy-load'],
      cellsNumberTotal = _ref['cells-number-total'],
      cellsNumberGroup = _ref['cells-number-group'],
      props = _objectWithoutProperties(_ref, ["inner-width", "inner-max-width", "inner-min-width", "lazy-load", "cells-number-total", "cells-number-group"]);

  var _useOverrides = useOverrides(props, overrides),
      override = _useOverrides.override,
      children = _useOverrides.children,
      rest = _useOverrides.rest;

  var cellsTotal = useMemo(function () {
    return parseInt(cellsNumberTotal) > 0 ? parseInt(cellsNumberTotal) : 1;
  }, [cellsNumberTotal]);
  var cellsGroup = useMemo(function () {
    return parseInt(cellsNumberGroup) > 0 ? parseInt(cellsNumberGroup) : 1;
  }, [cellsNumberGroup]);
  var ref = useRef(null);
  useImperativeHandle(forwardedRef, function () {
    return ref.current;
  });
  var render = useLazyHydrate({
    strategy: WHEN_VISIBLE
  }, ref);

  if (!render && lazyLoad) {
    return React.createElement(Box, _extends({
      display: "flex"
    }, rest, {
      ref: ref,
      dangerouslySetInnerHTML: {
        __html: ''
      }
    }));
  }

  return React.createElement(Box, _extends({
    margin: "0",
    padding: "24px 0",
    width: "100%",
    display: "flex"
  }, rest, {
    ref: ref
  }), React.createElement(StructureContent, _extends({
    iw: iw,
    imaxw: imaxw,
    iminw: iminw,
    cellsTotal: cellsTotal,
    cellsGroup: cellsGroup
  }, override('Content'))), children);
});

var propInfo = _objectSpread({
  'cells-number-total': {
    title: 'Total number of cells',
    control: 'input',
    type: 'number',
    category: 'Cells',
    weight: 1
  },
  'cells-number-group': {
    title: 'Number of cells in the pattern',
    control: 'input',
    type: 'number',
    category: 'Cells',
    weight: 1
  },
  'inner-width': {
    title: 'Content width',
    control: 'input',
    library: 'components.section.width',
    transformer: 'width',
    category: 'Main',
    weight: 1
  },
  'inner-min-width': {
    title: 'Content min width',
    control: 'input',
    library: 'components.section.minWidth',
    transformer: 'width',
    category: 'Main',
    weight: 1
  },
  'inner-max-width': {
    title: 'Content max width',
    control: 'input',
    library: 'components.section.maxWidth',
    transformer: 'width',
    category: 'Main',
    weight: 1
  },
  'lazy-load': {
    type: 'boolean',
    control: 'checkbox',
    category: 'Main'
  }
}, commonProps, {}, pointerEventsCategoryBase);

var defaultProps = _objectSpread({
  'cells-number-total': '3',
  'inner-width': '--cmp-section-width-default',
  'inner-min-width': '--cmp-section-minWidth-default',
  'inner-max-width': '--cmp-section-maxWidth-default',
  'lazy-load': true
}, pointerEventsCategoryBaseDefaults);

var effects = {
  hover: ':hover'
};
export default Object.assign(Structure, {
  overrides: overrides,
  defaultProps: defaultProps,
  effects: effects,
  propInfo: propInfo
});