import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import atomize from '@quarkly/atomize';
import { commonProps, pointerEventsCategoryBase, pointerEventsCategoryBaseDefaults } from './common-props';
export default atomize.img({
  name: 'Image',
  effects: {
    hover: ':hover',
    firstChild: ':first-child',
    lastChild: ':last-child',
    onlyChild: ':only-child',
    firstOfType: ':first-of-type',
    lastOfType: ':last-of-type',
    onlyOfType: ':only-of-type'
  },
  normalize: true,
  mixins: true,
  description: {
    en: 'Image element — image',
    ru: 'Элемент image — изображение'
  },
  propInfo: _objectSpread({
    src: {
      weight: 1,
      control: 'image',
      category: 'Main',
      title: 'Src',
      description: {
        en: 'src — image address',
        ru: 'src — aдрес изображения'
      }
    },
    srcSet: {
      title: 'Srcset',
      weight: 1,
      type: 'string',
      control: 'srcSet',
      multiply: true,
      category: 'Main',
      description: {
        en: 'srcSet — a string which identifies one or more image sources with descriptors',
        ru: 'srcSet — строка, определяющая один или несколько источников изображений с дескрипторами'
      }
    },
    sizes: {
      title: 'Sizes',
      weight: 1,
      type: 'string',
      control: 'sizes',
      multiply: true,
      category: 'Main',
      description: {
        en: 'sizes — image slot sizes from srcSet for different breakpoints',
        ru: 'sizes — размеры контейнера изображения из srcSet для различных брейкпоинтов'
      }
    },
    alt: {
      title: 'Alt',
      weight: 1,
      type: 'string',
      category: 'Main',
      description: {
        en: 'alt – a piece of text that appears when an image cannot be displayed',
        ru: 'alt — текст, который будет отображаться когда изображение недоступно'
      }
    },
    title: {
      title: 'Title',
      weight: 1,
      type: 'string',
      category: 'Main',
      description: {
        en: 'title – additional information for the element that appears as a tooltip',
        ru: 'title — описывает содержимое элемента в виде всплывающей подсказки'
      }
    },
    'object-fit': {
      title: 'Object fit',
      weight: 1,
      type: 'string',
      control: 'select',
      variants: ['fill', 'contain', 'cover', 'none', 'scale-down'],
      category: 'Extra styles',
      description: {
        en: 'object-fit – defines how the content of the replaced element should be resized to fit its container',
        ru: 'object-fit — определяет, как содержимое заменяемого элемента должно заполнять контейнер'
      }
    },
    'object-position': {
      title: 'Object position',
      weight: 1,
      type: 'string',
      category: 'Extra styles',
      description: {
        en: 'object-position – specifies the alignment of the selected replaced element contents within the element box relative to the X and Y coordinate axes',
        ru: 'object-position — задаёт положение содержимого замещаемого элемента внутри контейнера относительно координатных осей X и Y'
      }
    },
    loading: {
      title: 'Loading',
      weight: 1,
      type: 'string',
      category: 'Main',
      control: 'select',
      variants: ['eager', 'lazy'],
      description: {
        en: 'loading - indicates how the browser should load the image',
        ru: 'loading — указывает как браузер должен загружать изображение'
      }
    }
  }, commonProps, {}, pointerEventsCategoryBase)
}, _objectSpread({
  'min-width': '16px',
  'min-height': '16px',
  display: 'inline-block',
  'object-fit': 'contain',
  'object-position': '50% 50%',
  loading: 'eager'
}, pointerEventsCategoryBaseDefaults));